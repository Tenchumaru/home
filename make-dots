#!/bin/sh
cd $HOME
if [ -s .bashrc -a ! -s .bashrc.backup ]; then
	cp -p .bashrc .bashrc.backup
	if grep -q force_color_prompt .bashrc; then
		sed -e "/^#force_color_prompt/s/#//" -e "/debian.*033/s/'[^']*/'"'\\[\\033[01;32m\\]\\!\\[\\033[00m\\] \\[\\033[01;34m\\]\\w\\[\\033[00m\\]$ /' .bashrc > .bashrc.tmp
		mv .bashrc.tmp .bashrc
	fi
	grep -q PYTHONPATH .bashrc || echo "export PYTHONPATH=~/lib" >> .bashrc
fi
cat > .bash_aliases <<- EOF
	cd_() {
	 "cd" "\$@" && ls --color=auto -F
	}
	gds_() {
	 [ -n "\$1" ] || return
	 for c in \$(git log --name-status | grep -m \$1 '^commit ' | sed 's/commit //'); do
	  echo commit \$c
	  (echo; git log --name-status) | sed -e "1,/\$c/d" -e '/^commit /q' | grep -v '^commit '
	  git diff \$c^ \$c
	  echo
	 done
	}
	glgd_() {
	 ( git log --name-status | sed /\$1/q ; echo ; git diff \$1 ) > ../_
	}
	gr_() {
	 T=\$(mktemp --directory)
	 grep '/\$' .gitignore | sed -e 's/\\[.\\(.\\)\\]/\\1/g' -e 's/\\///g' | sed 's/\\(.*\\)/\\/\\\\\\/\\1\\\\\\/\\/Id/' | sed 's/\\*/.*/g' > \$T/t
	 echo grep \\\\ > \$T/u
	 for arg in "\$@"; do
	  if echo \$arg | grep -F "'" > /dev/null; then
	   echo '"'\$arg'" \\' >> \$T/u
	  else
	   echo "'"\$arg"' \\\\" >> \$T/u
	  fi
	 done
	 find . -type f | sed -e 's/^/ "/' -e 's/\$/" \\\\/' | grep -Fv /.git/ >> \$T/u
	 sed -f \$T/t \$T/u > \$T/v
	 bash \$T/v
	 rm -r \$T
	}
	pd_() {
	 pushd "\$@" && ls --color=auto -F
	}
	pp_() {
	 popd "\$@" && ls --color=auto -F
	}
	select_branch() {
	 for B in dev main master; do
	  if git switch \$B 2> /dev/null; then
	   return
	  fi
	 done
	 B=
	}
	rall_() {
	 select_branch
	 [ -n "\$B" ] || return
	 for branch in \$(git branch | grep -v " \$B\\\$"); do
	  echo "\$branch" | grep -Fiq release && continue
	  git switch "\$branch" || return
	  git rebase \$B || return
	 done
	 git switch \$B
	}
	wip_() {
	 D=.
	 while ! [ -d "\$D/.git" ]; do
	  D=\$(readlink -f "\$D/..")
	  [ "\$D" = "/" ] && return
	 done
	 git add "\$D" && git commit -m WIP
	}
	ephemeral_() {
	 B=\$(git branch 2> /dev/null | grep -F "*" | sed -e s/..// -e 's/(.* //' -e 's/)//')
	 [ "\$B" = "ephemeral" ] && return
	 git checkout -b ephemeral && git add . && git commit -m WIP && git switch \$B
	}
	rephemeral_() {
	 B=\$(git branch 2> /dev/null | grep -F "*" | sed -e s/..// -e 's/(.* //' -e 's/)//')
	 [ "\$B" = "ephemeral" ] && return
	 git checkout ephemeral &&
	  git rebase \$B &&
	  git switch \$B &&
	  git merge --ff-only ephemeral &&
	  git branch -d ephemeral &&
	  git reset HEAD^
	}
	vc_() {
	 vi \$(git status -s | grep -E '(U.)|(.U)' | cut -c 4-)
	}

	alias b='cd ..'
	alias cd=cd_
	alias ephemeral=ephemeral_
	alias gaca='git add . && git commit --amend'
	alias gbs='git bisect start && git bisect bad && git bisect good'
	alias gca='git commit --amend'
	alias gcm='git commit -m'
	alias gd='git diff'
	alias gds=gds_
	alias gh='history | grep'
	alias gl='git log --name-status'
	alias glgd=glgd_
	alias gmc='git mergetool && git clean -f'
	alias gr=gr_
	alias grc='git rebase --continue'
	alias grep='grep --color=auto'
	alias gri='git rebase -i'
	alias gs='git status -s'
	alias gsu='git submodule update'
	alias gx='git checkout'
	alias h=history
	alias j=jobs
	alias la='ls -A'
	alias lal='la -l'
	alias ll='ls -l'
	alias ls='ls --color=auto -F'
	alias md=mkdir
	alias pbcopy='xclip -i -selection clipboard'
	alias pd=pd_
	alias pp=pp_
	alias rall=rall_
	alias rd=rmdir
	alias rephemeral=rephemeral_
	alias tm='tmux attach || tmux new'
	alias vc=vc_
	alias wip=wip_
EOF
cat > .vimrc <<- EOF
	map <C-n> :set nu<CR>
	map <C-p> :set nonu<CR>
	map gda} {d}
	map gC :wa<CR>:!dotnet run :6006 localhost:6007<CR>
	map gP :wa<CR>:!pudb3 "%" --test<CR>
	map gc :wa<CR>:!g++ -std=c++14 "%" && ./a.out --test
	map gh :wa<CR>:!python3 "%" --help<CR>
	map gj :wa<CR>:!"\$(readlink -f "%")" --test<CR>
	map gl :ls<CR>
	map gn :wa<CR>:!node "%" --test<CR>
	map gp :wa<CR>:!python "%" --test<CR>
	map gq :wa<CR>:!psql -f "%"<CR>
	map gw :wa<CR>
	set autoindent
	set background=dark
	set hlsearch
	set scrolloff=0
	set shiftwidth=4
	set tabstop=4
	syntax on
	filetype indent plugin on
	autocmd FileType c setlocal shiftwidth=4 tabstop=4
	autocmd FileType cpp setlocal shiftwidth=4 tabstop=4
	autocmd FileType cs setlocal expandtab softtabstop=2 shiftwidth=2 tabstop=8
	autocmd FileType html setlocal expandtab softtabstop=2 shiftwidth=2 tabstop=8
	autocmd FileType javascript setlocal expandtab softtabstop=2 shiftwidth=2 tabstop=8
	autocmd FileType json setlocal expandtab softtabstop=2 shiftwidth=2 tabstop=8
	autocmd FileType python setlocal expandtab softtabstop=4 shiftwidth=4 tabstop=8
	autocmd FileType typescript setlocal expandtab softtabstop=2 shiftwidth=2 tabstop=8
	autocmd FileType typescriptreact setlocal expandtab softtabstop=2 shiftwidth=2 tabstop=8
EOF
[ -f .zshrc ] && mv .bash_aliases .zsh_aliases
