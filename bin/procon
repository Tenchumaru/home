#!/bin/sh
[ -x /bin/bash ] && S=/bin/bash || S=/bin/sh
usage() {
	echo "Run command lines fed from input concurrently up to limit."
	echo
	echo "usage: $0 limit [-s shell] [input_commands_file]"
	echo
	echo "Use -s to specify a path to a shell (default $S)."
	echo
	echo "If the specified limit is less than one, this script will use the"
	echo "number of processors reported in /proc/cpuinfo."
	exit 2
}

# Collect and validate the command-line parameters.
while getopts s:h o; do
	case $o in
		s)    S=$OPTARG;;
		h|\?) usage;;
	esac
done
shift `expr $OPTIND - 1`
[ $# -ge 1 -a $# -le 2 ] || usage
Limit=$1
[ $Limit -ge 1 ] || Limit=`grep processor /proc/cpuinfo | wc -l`
InputCommandsFile=$2

# Define the functions and create the temporary directory.
clean_up() {
	consume 0
	rm -fr $T
	exit 0
}
consume() {
	while [ `ls -1 $T | wc -l` -gt $1 ]
	do
		sleep .5
	done
}
produce() {
	$S $1
	rm $1
}
T=`mktemp --directory`
trap clean_up INT TERM

# Execute all commands in the input command file concurrently.
N=0
cat $InputCommandsFile | while read L
do
	N=`expr $N + 1`
	echo "$L" > $T/$N
	produce $T/$N &
	consume $Limit
done
clean_up
